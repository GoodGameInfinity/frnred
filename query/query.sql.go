// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (
  id, url
) VALUES (
  $1, $2
)
RETURNING id, url
`

type CreateUrlParams struct {
	ID  string
	Url string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.ID, arg.Url)
	var i Url
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const createVanity = `-- name: CreateVanity :one
INSERT INTO vanities (
  id, url
) VALUES (
  $1, $2
)
RETURNING id, url
`

type CreateVanityParams struct {
	ID  string
	Url string
}

func (q *Queries) CreateVanity(ctx context.Context, arg CreateVanityParams) (Vanity, error) {
	row := q.db.QueryRowContext(ctx, createVanity, arg.ID, arg.Url)
	var i Vanity
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM vanities
WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUrl, id)
	return err
}

const deleteVanity = `-- name: DeleteVanity :exec
DELETE FROM urls
WHERE id = $1
`

func (q *Queries) DeleteVanity(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVanity, id)
	return err
}

const getUrl = `-- name: GetUrl :one
SELECT id, url FROM urls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, id string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrl, id)
	var i Url
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const getVanity = `-- name: GetVanity :one
SELECT id, url FROM vanities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVanity(ctx context.Context, id string) (Vanity, error) {
	row := q.db.QueryRowContext(ctx, getVanity, id)
	var i Vanity
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}
