// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
)

const checkKey = `-- name: CheckKey :one
SELECT 1 hashed FROM keys
`

func (q *Queries) CheckKey(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, checkKey)
	var hashed int32
	err := row.Scan(&hashed)
	return hashed, err
}

const createKey = `-- name: CreateKey :one
INSERT INTO keys (
  id, hashed, admin
) VALUES (
  $1, $2, $3
)
RETURNING id, hashed, admin
`

type CreateKeyParams struct {
	ID     string
	Hashed string
	Admin  sql.NullBool
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) (Key, error) {
	row := q.db.QueryRowContext(ctx, createKey, arg.ID, arg.Hashed, arg.Admin)
	var i Key
	err := row.Scan(&i.ID, &i.Hashed, &i.Admin)
	return i, err
}

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (
  id, url
) VALUES (
  $1, $2
)
RETURNING id, url
`

type CreateUrlParams struct {
	ID  string
	Url string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.ID, arg.Url)
	var i Url
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const createVanity = `-- name: CreateVanity :one
INSERT INTO vanities (
  id, url
) VALUES (
  $1, $2
)
RETURNING id, url
`

type CreateVanityParams struct {
	ID  string
	Url string
}

func (q *Queries) CreateVanity(ctx context.Context, arg CreateVanityParams) (Vanity, error) {
	row := q.db.QueryRowContext(ctx, createVanity, arg.ID, arg.Url)
	var i Vanity
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const deleteKey = `-- name: DeleteKey :exec
DELETE FROM keys
WHERE id = $1
`

func (q *Queries) DeleteKey(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteKey, id)
	return err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM vanities
WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUrl, id)
	return err
}

const deleteVanity = `-- name: DeleteVanity :exec
DELETE FROM urls
WHERE id = $1
`

func (q *Queries) DeleteVanity(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVanity, id)
	return err
}

const findKey = `-- name: FindKey :one
SELECT id, hashed, admin FROM keys WHERE hashed = $1
`

func (q *Queries) FindKey(ctx context.Context, hashed string) (Key, error) {
	row := q.db.QueryRowContext(ctx, findKey, hashed)
	var i Key
	err := row.Scan(&i.ID, &i.Hashed, &i.Admin)
	return i, err
}

const getUrl = `-- name: GetUrl :one
SELECT id, url FROM urls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, id string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrl, id)
	var i Url
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const getVanity = `-- name: GetVanity :one
SELECT id, url FROM vanities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVanity(ctx context.Context, id string) (Vanity, error) {
	row := q.db.QueryRowContext(ctx, getVanity, id)
	var i Vanity
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const listKeys = `-- name: ListKeys :many
SELECT id, admin FROM keys
`

type ListKeysRow struct {
	ID    string
	Admin sql.NullBool
}

func (q *Queries) ListKeys(ctx context.Context) ([]ListKeysRow, error) {
	rows, err := q.db.QueryContext(ctx, listKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListKeysRow
	for rows.Next() {
		var i ListKeysRow
		if err := rows.Scan(&i.ID, &i.Admin); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
